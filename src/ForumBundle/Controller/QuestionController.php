<?php

namespace ForumBundle\Controller;

use ArticleBundle\Entity\Categorie;
use CMEN\GoogleChartsBundle\GoogleCharts\Charts\BarChart;
use Doctrine\DBAL\Types\TextType;
use Doctrine\ORM\Query\AST\Functions\CurrentDateFunction;
use ForumBundle\Entity\AimeF;
use ForumBundle\Entity\Commentaire;
use ForumBundle\Entity\Question;
use ForumBundle\Entity\Signale;
use ForumBundle\Form\CommentaireType;
use ForumBundle\Form\QuestionType;
use KMS\FroalaEditorBundle\Form\Type\FroalaEditorType;
use Mgilet\NotificationBundle\Entity\Notification;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Validator\Constraints\Date;
use Symfony\Component\Validator\Constraints\DateTime;


class QuestionController extends Controller
{
    public function createAction(Request $request)
    {
        $user=$this->getUser();
        $question = new Question();
        $form = $this->createForm(QuestionType::class,$question);
        $em = $this->getDoctrine()->getManager();
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            /** @var UploadedFile $file
             */

            $file = $question->getImg();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('image_directory',$fileName),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $question->setImg($fileName);
            $question->setDateQ((new \DateTime()));
            $question->setIduser($user);
            $question->setNbrjaimes(0);
            $question->setNbrcommentaire(0);



            $question=$form->getData();
            $em->persist($question);
            $em->flush();
            return $this->redirectToRoute("read");
        }

        return $this->render('ForumBundle:Question:create.html.twig', array('form'=>$form->createView()
            // ...
        ));
    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'data_class' => Question::class,
        ));
    }






    public function readAction(Request $request)
    {

        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();




        $aimes=$em->getRepository(AimeF::class)->findBy(['id_user'=>$user->getId()]);

        $em    = $this->get('doctrine.orm.entity_manager');
        $dql   = "SELECT a FROM ForumBundle:Question a";
        $query = $em->createQuery($dql);
        $categories=$em->getRepository(Categorie::class)->findAll();



        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            6/*limit per page*/
        );


        // parameters to template
        return $this->render("ForumBundle:Question:read.html.twig",array('pagination' => $pagination ,
            'user'=>$user,
            'aime'=>$aimes,
            "categories"=>$categories,


            ));
    }

    public function readQCAction($id,Request $request)
    {
        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();
        $questions = $em->getRepository(Question::class)->findquest($id);
        $categories=$em->getRepository(Categorie::class)->findAll();
        $aimes=$em->getRepository(AimeF::class)->findBy(['id_user'=>$user->getId()]);
        $questionNombre=$em->getRepository(Question::class)->questionBycategorie($id);


        return $this->render('ForumBundle:Question:readQC.html.twig', array('Questions'=>$questions,
            "categories"=>$categories,

            'aime'=>$aimes,
            'user'=>$user,
            'questionNombre'=>$questionNombre,
            ));


    }

    public function readAdminAction(Request $request)
    {
        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();
        $questions = $em->getRepository(Question::class)->findAll();
        $categories=$em->getRepository(Categorie::class)->findAll();
        $aimes=$em->getRepository(AimeF::class)->findBy(['id_user'=>$user->getId()]);
        $notifications=$em->getRepository(Notification::class)->findAll();


        // parameters to template
        return $this->render("ForumBundle:Question:readAdmin.html.twig",array('questions' => $questions ,
            'user'=>$user,
            'aime'=>$aimes,
            "categories"=>$categories,
            'notifications'=>$notifications,
        ));
    }

    public function readAdminSignaleAction()
    {
        $em=$this->getDoctrine()->getManager();
        $signales=$em->getRepository(Signale::class)->findAll();
        return $this->render("@Forum/Question/readAdminSignale.html.twig",array('signales'=>$signales));
    }







    public function updateAction(Request $request , $id)
    {


        $em = $this->getDoctrine()->getManager();
        $question = $em->getRepository(Question::class)->find($id);
        $form = $this->createForm(QuestionType::class,$question);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $question=$form->getData();
            $em->flush();
            return $this->redirectToRoute("read");
        }

        return $this->render('ForumBundle:Question:create.html.twig', array('form'=>$form->createView()
        ));
    }

    public function updateAdminAction(Request $request , $id)
    {


        $em = $this->getDoctrine()->getManager();
        $question = $em->getRepository(Question::class)->find($id);
        $form = $this->createForm(QuestionType::class,$question);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {

            $question=$form->getData();
            $em->flush();
            return $this->redirectToRoute("readAdmin");
        }

        return $this->render('ForumBundle:Question:updateAdmin.html.twig', array('form'=>$form->createView()
        ));
    }





    public function deleteAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $M = $em->getRepository(Question::class)->find($id);
        $em->remove($M);
        $em->flush();
        return $this->redirectToRoute('read');
    }

    public function deleteAdminAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $M = $em->getRepository(Question::class)->find($id);
        $em->remove($M);
        $em->flush();
        return $this->redirectToRoute('readAdmin');
    }






    public function readQAction($id , Request $request)
    {
        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();
        $question = $em->getRepository(Question::class)->find($id);
        $commentaires=$em->getRepository(Commentaire::class)->findC($id);
        $commentaireNombre=$em->getRepository(Commentaire::class)->commentaireByQuestion($id);
        $aimeNombre=$em->getRepository(AimeF::class)->aimeByQuestion($id);
        $categories=$em->getRepository(Categorie::class)->findAll();
        $aimes=$em->getRepository(AimeF::class)->findaimes($id);
        $jaime=$em->getRepository(AimeF::class)->findeverything($user->getId());
        $jaimeq=$em->getRepository(AimeF::class)->findeverythingQ($id);



        $commentaire = new Commentaire();
        $form = $this->createForm(CommentaireType::class,$commentaire);
        $em = $this->getDoctrine()->getManager();
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $commentaire->setDate((new \DateTime()));
            $commentaire->setIduser($user);
            $commentaire->setIdQuestion($question);
            $commentaire->setDate((new \DateTime()));
            $question->setNbrcommentaire($question->getNbrcommentaire()+1);


            $em->persist($commentaire);
            $em->flush();


            $manager = $this->get("mgilet.notification");
            $notification = $manager->createNotification("Commentaire");
            $notification->setDate(new \DateTime("now"));
            $notification->setLink($question->getId());
            $notification->setMessage("Cette utilisteur a commentÃ©");
            $manager->addNotification(array($question->getIduser()),$notification,true);
            return $this->redirectToRoute("readQ",array("id"=>$id));
        }

        $manager = $this->get("mgilet.notification");
        $list = $manager->getUnseenNotifications($user);

//        foreach ($list as $notif)
//        {
//            $manager->markAsSeen($user,$notif,true);
//        }

        return $this->render('ForumBundle:Question:readQ.html.twig',array('commentaires'=>$commentaires,'V'=>$question
            ,'form'=>$form->createView(),
            'user'=>$user,
            'commentaireNombre'=>$commentaireNombre,
            'aimenombre'=>$aimeNombre,
            "categories"=>$categories,
            'aimes'=>$aimes,
            'jaime'=>$jaime,
            'jaimeq'=>$jaimeq,
            'notifications' => $list,
            ));

    }

    public function readQAdminAction($id , Request $request)
    {
        $user=$this->getUser();

        $em = $this->getDoctrine()->getManager();
        $commentaires=$em->getRepository(Commentaire::class)->findC($id);

        return $this->render('ForumBundle:Question:readQAdmin.html.twig',array('commentaires'=>$commentaires,
            'user'=>$user
        ));
    }

    public function chartLineAction()
    {
        $em = $this->getDoctrine()->getManager();
        $questions=$em->getRepository('ForumBundle:Question')->findAll();
        $titres= array();
        $jaimes= array();
        foreach ($questions as $quest)
        {
            array_push($titres, $quest->getTitre());
            array_push($jaimes, $quest->getNbrjaimes());
        }
        $bar = new BarChart();
        $bar->getData()->setArrayToDataTable([
            $titres,$jaimes        ]);
        $bar->getOptions()->setTitle('Nombre de jaimes');
        $bar->getOptions()->getHAxis()->setTitle('jaimes');
        $bar->getOptions()->getHAxis()->setMinValue(0);
        $bar->getOptions()->getVAxis()->setTitle('Question');
        $bar->getOptions()->setWidth(900);
        $bar->getOptions()->setHeight(500);

        return $this->render('ForumBundle:Question:stat.html.twig',array('barchart' => $bar));

    }

    public function readplusaimeAction(Request $request)
    {
        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();
        $questions = $em->getRepository(Question::class)->findquestplusaime();
        $categories=$em->getRepository(Categorie::class)->findAll();
        $aimes=$em->getRepository(AimeF::class)->findBy(['id_user'=>$user->getId()]);


        return $this->render('ForumBundle:Question:readQplusAimes.html.twig', array('Questions'=>$questions,
            "categories"=>$categories,

            'aime'=>$aimes,
            'user'=>$user,
        ));

    }
    public function readpluscommenteAction()
    {
        $user=$this->getUser();
        $em = $this->getDoctrine()->getManager();
        $questions = $em->getRepository(Question::class)->findquestpluscommente();
        $categories=$em->getRepository(Categorie::class)->findAll();
        $aimes=$em->getRepository(AimeF::class)->findBy(['id_user'=>$user->getId()]);


        return $this->render('ForumBundle:Question:readQplusAimes.html.twig', array('Questions'=>$questions,
            "categories"=>$categories,

            'aime'=>$aimes,
            'user'=>$user,
        ));
    }





}
